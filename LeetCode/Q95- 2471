https://leetcode.com/problems/minimum-number-of-operations-to-sort-a-binary-tree-by-level/?envType=daily-question&envId=2024-12-23

import java.util.*;

class Solution {
    public int minimumOperations(TreeNode root) {
        if (root == null) return 0;

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int operations = 0;

        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> level = new ArrayList<>();

            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                level.add(node.val);
                if (node.left != null) queue.offer(node.left);
                if (node.right != null) queue.offer(node.right);
            }

            operations += calculateMinSwaps(level);
        }

        return operations;
    }

    private int calculateMinSwaps(List<Integer> nums) {
        int n = nums.size();
        int[][] paired = new int[n][2];

       
        for (int i = 0; i < n; i++) {
            paired[i][0] = nums.get(i); // value
            paired[i][1] = i;           // index
        }

        // Sort pairs by value
        Arrays.sort(paired, Comparator.comparingInt(a -> a[0]));
        boolean[] visited = new boolean[n];
        int swaps = 0;

        // Count cycles in the sorted array
        for (int i = 0; i < n; i++) {
            if (visited[i] || paired[i][1] == i) {
                continue; // Already visited or in correct position
            }

            int cycleSize = 0;
            int j = i;
            while (!visited[j]) {
                visited[j] = true;
                j = paired[j][1];
                cycleSize++;
            }
            if (cycleSize > 1) {
                swaps += cycleSize - 1;
            }
        }

        return swaps;
    }
}
