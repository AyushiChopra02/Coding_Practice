https://leetcode.com/problems/maximal-score-after-applying-k-operations/description/

import java.util.PriorityQueue;
public class Solution {
    public long maxKelements(int[] nums, int k) {
      
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);

        for (int num : nums) {
            maxHeap.add(num);
        }

        long score = 0; 

        for (int i = 0; i < k; i++) {
        
            int maxElement = maxHeap.poll();
            score += maxElement;  
            
          
            int reducedElement = (maxElement + 2) / 3;
            maxHeap.add(reducedElement);
        }

        return score;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

     
        int[] nums1 = {672579538, 806947365, 854095676, 815137524};
        int k1 = 3;
        System.out.println(solution.maxKelements(nums1, k1));  
    }
}
