https://leetcode.com/problems/divide-nodes-into-the-maximum-number-of-groups/description/?envType=daily-question&envId=2025-01-30

import java.util.*;

class Solution {
    public int magnificentSets(int n, int[][] edges) {
        // Step 1: Create adjacency list representation of the graph
        List<Integer>[] graph = new ArrayList[n + 1];
        for (int i = 1; i <= n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] edge : edges) {
            graph[edge[0]].add(edge[1]);
            graph[edge[1]].add(edge[0]);
        }

        // Step 2: To detect cycles and divide into components
        int[] color = new int[n + 1];  // 0 = unvisited, 1 = color A, -1 = color B
        Arrays.fill(color, 0);

        int maxGroups = 0;

        for (int i = 1; i <= n; i++) {
            if (color[i] == 0) { // If node is unvisited, process its component
                List<Integer> component = new ArrayList<>();
                if (!bfsCheckBipartite(i, graph, color, component)) {
                    return -1; // Graph contains an odd-length cycle
                }
                
                // Step 3: Find the max depth using BFS
                int maxDepth = 0;
                for (int node : component) {
                    maxDepth = Math.max(maxDepth, bfsMaxDepth(node, graph, n));
                }
                
                maxGroups += maxDepth;
            }
        }
        return maxGroups;
    }

    // BFS function to check if the component is bipartite and collect nodes
    private boolean bfsCheckBipartite(int start, List<Integer>[] graph, int[] color, List<Integer> component) {
        Queue<Integer> queue = new LinkedList<>();
        queue.add(start);
        color[start] = 1;
        component.add(start);

        while (!queue.isEmpty()) {
            int node = queue.poll();
            for (int neighbor : graph[node]) {
                if (color[neighbor] == 0) { // If not visited, color it oppositely
                    color[neighbor] = -color[node];
                    queue.add(neighbor);
                    component.add(neighbor);
                } else if (color[neighbor] == color[node]) {
                    return false; // Odd-length cycle detected
                }
            }
        }
        return true;
    }

    // BFS to find max depth (longest shortest path from any node)
    private int bfsMaxDepth(int start, List<Integer>[] graph, int n) {
        Queue<Integer> queue = new LinkedList<>();
        Map<Integer, Integer> level = new HashMap<>();
        queue.add(start);
        level.put(start, 1);

        int maxDepth = 1;
        while (!queue.isEmpty()) {
            int node = queue.poll();
            int currentLevel = level.get(node);

            for (int neighbor : graph[node]) {
                if (!level.containsKey(neighbor)) {
                    level.put(neighbor, currentLevel + 1);
                    maxDepth = Math.max(maxDepth, currentLevel + 1);
                    queue.add(neighbor);
                }
            }
        }
        return maxDepth;
    }
}
