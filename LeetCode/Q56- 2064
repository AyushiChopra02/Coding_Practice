https://leetcode.com/problems/minimized-maximum-of-products-distributed-to-any-store/description/?envType=daily-question&envId=2024-11-14



public class Solution {
    public int minimizedMaximum(int n, int[] quantities) {
        int left = 1;
        int right = getMax(quantities);
        
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (canDistribute(n, quantities, mid)) {
                right = mid;
            } else {
                left = mid + 1; 
            }
        }
        
        return left;
    }
    

    private boolean canDistribute(int n, int[] quantities, int maxPerStore) {
        int storeCount = 0;
        for (int quantity : quantities) {
            
            storeCount += (quantity + maxPerStore - 1) / maxPerStore; // Equivalent to ceil(quantity / maxPerStore)
            if (storeCount > n) {
                return false; 
            }
        }
        return true;
    }
    
    
    private int getMax(int[] quantities) {
        int max = 0;
        for (int quantity : quantities) {
            max = Math.max(max, quantity);
        }
        return max;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        int n1 = 6;
        int[] quantities1 = {11, 6};
        System.out.println(solution.minimizedMaximum(n1, quantities1)); 
        
        int n2 = 7;
        int[] quantities2 = {15, 10, 10};
        System.out.println(solution.minimizedMaximum(n2, quantities2));
        
        int n3 = 1;
        int[] quantities3 = {100000};
        System.out.println(solution.minimizedMaximum(n3, quantities3)); 
    }
}
