 https://leetcode.com/problems/find-the-number-of-distinct-colors-among-the-balls/description/?envType=daily-question&envId=2025-02-07

import java.util.*;

class Solution {
    public int[] queryResults(int limit, int[][] queries) {
        Map<Integer, Integer> ballColor = new HashMap<>(); // Maps ball -> color
        Map<Integer, Integer> colorFreq = new HashMap<>(); // Maps color -> frequency
        int[] result = new int[queries.length];
        int distinctColorCount = 0;

        for (int i = 0; i < queries.length; i++) {
            int ball = queries[i][0];
            int color = queries[i][1];

            // If the ball already has a color, decrement the frequency of that color
            if (ballColor.containsKey(ball)) {
                int prevColor = ballColor.get(ball);
                colorFreq.put(prevColor, colorFreq.get(prevColor) - 1);
                
                // If previous color is no longer present on any ball, remove it from distinct count
                if (colorFreq.get(prevColor) == 0) {
                    colorFreq.remove(prevColor);
                    distinctColorCount--;
                }
            }

            // Assign new color to the ball
            ballColor.put(ball, color);
            
            // Increase frequency of the new color
            colorFreq.put(color, colorFreq.getOrDefault(color, 0) + 1);

            // If this color was newly added, increment the distinct color count
            if (colorFreq.get(color) == 1) {
                distinctColorCount++;
            }

            result[i] = distinctColorCount;
        }

        return result;
    }
}
