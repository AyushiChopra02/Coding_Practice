https://leetcode.com/problems/longest-happy-string/description/?envType=daily-question&envId=2024-10-16



import java.util.PriorityQueue;

public class Solution {
    public String longestDiverseString(int a, int b, int c) {
       
        PriorityQueue<int[]> maxHeap = new PriorityQueue<>((x, y) -> y[0] - x[0]);
        
        if (a > 0) maxHeap.offer(new int[]{a, 'a'});
        if (b > 0) maxHeap.offer(new int[]{b, 'b'});
        if (c > 0) maxHeap.offer(new int[]{c, 'c'});
        
        StringBuilder result = new StringBuilder();
        
        while (!maxHeap.isEmpty()) {
            int[] first = maxHeap.poll();
            int firstCount = first[0];
            char firstChar = (char) first[1];
            
            if (result.length() >= 2 && result.charAt(result.length() - 1) == firstChar 
                && result.charAt(result.length() - 2) == firstChar) {
                if (maxHeap.isEmpty()) {
                  
                    break;
                }
                
                
                int[] second = maxHeap.poll();
                result.append((char) second[1]);
                second[0]--;
                
                if (second[0] > 0) {
                    maxHeap.offer(second);
                }
                
                maxHeap.offer(first);
            } else {
              
                result.append(firstChar);
                firstCount--;
                
                if (firstCount > 0) {
                    maxHeap.offer(new int[]{firstCount, firstChar});
                }
            }
        }
        
        return result.toString();
    }
}
