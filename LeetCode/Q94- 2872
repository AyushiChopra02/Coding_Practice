https://leetcode.com/problems/maximum-number-of-k-divisible-components/description/


import java.util.*;

public class Solution {
  
    private long dfs(int node, int parent, List<List<Integer>> adj, int[] values, int k, int[] count) {
        long sum = values[node];
        for (int neighbor : adj.get(node)) {
            if (neighbor != parent) {
                sum += dfs(neighbor, node, adj, values, k, count);
            }
        }

        sum %= k;
        if (sum == 0) {
            count[0]++; 
        }
        
        return sum;
    }

    public int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        
        for (int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }

        // Initialize the count array to track valid splits
        int[] count = new int[1];

        // Perform DFS starting from the root (node 0)
        dfs(0, -1, adj, values, k, count);

        return count[0];
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example 1
        int n1 = 5;
        int[][] edges1 = {{0, 2}, {1, 2}, {1, 3}, {2, 4}};
        int[] values1 = {1, 8, 1, 4, 4};
        int k1 = 6;
        System.out.println(solution.maxKDivisibleComponents(n1, edges1, values1, k1)); // Output: 2

        // Example 2
        int n2 = 7;
        int[][] edges2 = {{0, 1}, {0, 2}, {1, 3}, {1, 4}, {2, 5}, {2, 6}};
        int[] values2 = {3, 0, 6, 1, 5, 2, 1};
        int k2 = 3;
        System.out.println(solution.maxKDivisibleComponents(n2, edges2, values2, k2)); // Output: 3
    }
}
