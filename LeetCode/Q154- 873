https://leetcode.com/problems/length-of-longest-fibonacci-subsequence/description/


import java.util.*;

public class Solution {
    public int lenLongestFibSubseq(int[] arr) {
        int n = arr.length;
        Map<Integer, Integer> indexMap = new HashMap<>(); // Maps value to its index
        Map<Integer, Integer> dp = new HashMap<>(); // Stores the length of Fibonacci-like subsequences
        int maxLen = 0;

        // Populate the index map
        for (int i = 0; i < n; i++) {
            indexMap.put(arr[i], i);
        }

        // Iterate through all pairs of elements
        for (int k = 0; k < n; k++) {
            for (int j = 0; j < k; j++) {
                int ai = arr[k] - arr[j]; // Potential previous value in the sequence
                if (ai < arr[j] && indexMap.containsKey(ai)) {
                    int i = indexMap.get(ai);
                    int key = i * n + j; // Unique key for (i, j) pair
                    int length = dp.getOrDefault(key, 2) + 1;
                    dp.put(j * n + k, length);
                    maxLen = Math.max(maxLen, length);
                }
            }
        }

        return maxLen >= 3 ? maxLen : 0;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        int[] arr1 = {1, 2, 3, 4, 5, 6, 7, 8};
        System.out.println(solution.lenLongestFibSubseq(arr1)); // Output: 5

        int[] arr2 = {1, 3, 7, 11, 12, 14, 18};
        System.out.println(solution.lenLongestFibSubseq(arr2)); // Output: 3
    }
}
