https://leetcode.com/problems/sliding-puzzle/description/?envType=daily-question&envId=2024-11-25


import java.util.*;

class Solution {
    public int slidingPuzzle(int[][] board) {
        
        String target = "123450";
        
        StringBuilder start = new StringBuilder();
        for (int[] row : board) {
            for (int num : row) {
                start.append(num);
            }
        }

        int[][] neighbors = {
            {1, 3},     
            {0, 2, 4},  
            {1, 5},    
            {0, 4},    
            {1, 3, 5}, 
            {2, 4}      
        };

    
        Queue<String> queue = new LinkedList<>();
        Set<String> visited = new HashSet<>();
        
        queue.add(start.toString());
        visited.add(start.toString());
        
        int moves = 0;

        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String current = queue.poll();
                if (current.equals(target)) {
                    return moves;
                }

                int zeroIndex = current.indexOf('0');

                for (int neighbor : neighbors[zeroIndex]) {
                    char[] chars = current.toCharArray();
                    
                    char temp = chars[zeroIndex];
                    chars[zeroIndex] = chars[neighbor];
                    chars[neighbor] = temp;

                    String nextState = new String(chars);

                    if (!visited.contains(nextState)) {
                        queue.add(nextState);
                        visited.add(nextState);
                    }
                }
            }
            moves++;
        }

        return -1;
    }
}
