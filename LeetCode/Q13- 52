https://leetcode.com/problems/n-queens-ii/description/
 
import java.util.Arrays;

class Solution {
    public int totalNQueens(int n) {
        char[][] grid = new char[n][n];
        for (char[] row : grid) {
            Arrays.fill(row, '.');
        }
        return dfs(grid, 0);
    }

    public int dfs(char[][] grid, int row) {
        if (row == grid.length) {
            return 1;
        }
        int count = 0;
        for (int col = 0; col < grid[0].length; col++) {
            if (isValid(grid, row, col)) {
                grid[row][col] = 'Q';
                count += dfs(grid, row + 1);
                grid[row][col] = '.';
            }
        }
        return count;
    }

    public boolean isValid(char[][] grid, int row, int col) {
        for (int i = 0; i < grid.length; i++) {
            if (grid[i][col] == 'Q') {
                return false;
            }
        }
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (grid[i][j] == 'Q') {
                return false;
            }
        }
        for (int i = row - 1, j = col + 1; i >= 0 && j < grid.length; i--, j++) {
            if (grid[i][j] == 'Q') {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int n = 4;
        int result = sol.totalNQueens(n);
        System.out.println("Total solutions for " + n + " queens: " + result);
    }
}
